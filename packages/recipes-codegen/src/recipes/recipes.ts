/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Recipes API
 * The recipes API description
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateRecipeDto
} from '.././model';

import { customInstance } from '.././custom-instance';
import type { ErrorType , BodyType } from '.././custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const recipesControllerRecipesListV1 = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/v1/recipes`, method: 'GET', signal
    },
      options);
    }
  

export const getRecipesControllerRecipesListV1QueryKey = () => {
    return [`/v1/recipes`] as const;
    }

    
export const getRecipesControllerRecipesListV1QueryOptions = <TData = Awaited<ReturnType<typeof recipesControllerRecipesListV1>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof recipesControllerRecipesListV1>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRecipesControllerRecipesListV1QueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof recipesControllerRecipesListV1>>> = ({ signal }) => recipesControllerRecipesListV1(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof recipesControllerRecipesListV1>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RecipesControllerRecipesListV1QueryResult = NonNullable<Awaited<ReturnType<typeof recipesControllerRecipesListV1>>>
export type RecipesControllerRecipesListV1QueryError = ErrorType<unknown>


export function useRecipesControllerRecipesListV1<TData = Awaited<ReturnType<typeof recipesControllerRecipesListV1>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof recipesControllerRecipesListV1>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof recipesControllerRecipesListV1>>,
          TError,
          Awaited<ReturnType<typeof recipesControllerRecipesListV1>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRecipesControllerRecipesListV1<TData = Awaited<ReturnType<typeof recipesControllerRecipesListV1>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof recipesControllerRecipesListV1>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof recipesControllerRecipesListV1>>,
          TError,
          Awaited<ReturnType<typeof recipesControllerRecipesListV1>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRecipesControllerRecipesListV1<TData = Awaited<ReturnType<typeof recipesControllerRecipesListV1>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof recipesControllerRecipesListV1>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useRecipesControllerRecipesListV1<TData = Awaited<ReturnType<typeof recipesControllerRecipesListV1>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof recipesControllerRecipesListV1>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRecipesControllerRecipesListV1QueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const recipesControllerCreateRecipeV1 = (
    createRecipeDto: BodyType<CreateRecipeDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/v1/recipes`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createRecipeDto, signal
    },
      options);
    }
  


export const getRecipesControllerCreateRecipeV1MutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof recipesControllerCreateRecipeV1>>, TError,{data: BodyType<CreateRecipeDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof recipesControllerCreateRecipeV1>>, TError,{data: BodyType<CreateRecipeDto>}, TContext> => {

const mutationKey = ['recipesControllerCreateRecipeV1'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof recipesControllerCreateRecipeV1>>, {data: BodyType<CreateRecipeDto>}> = (props) => {
          const {data} = props ?? {};

          return  recipesControllerCreateRecipeV1(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RecipesControllerCreateRecipeV1MutationResult = NonNullable<Awaited<ReturnType<typeof recipesControllerCreateRecipeV1>>>
    export type RecipesControllerCreateRecipeV1MutationBody = BodyType<CreateRecipeDto>
    export type RecipesControllerCreateRecipeV1MutationError = ErrorType<unknown>

    export const useRecipesControllerCreateRecipeV1 = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof recipesControllerCreateRecipeV1>>, TError,{data: BodyType<CreateRecipeDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof recipesControllerCreateRecipeV1>>,
        TError,
        {data: BodyType<CreateRecipeDto>},
        TContext
      > => {

      const mutationOptions = getRecipesControllerCreateRecipeV1MutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const recipesControllerRecipeV1 = (
    slug: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/v1/recipes/${slug}`, method: 'GET', signal
    },
      options);
    }
  

export const getRecipesControllerRecipeV1QueryKey = (slug: string,) => {
    return [`/v1/recipes/${slug}`] as const;
    }

    
export const getRecipesControllerRecipeV1QueryOptions = <TData = Awaited<ReturnType<typeof recipesControllerRecipeV1>>, TError = ErrorType<unknown>>(slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof recipesControllerRecipeV1>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRecipesControllerRecipeV1QueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof recipesControllerRecipeV1>>> = ({ signal }) => recipesControllerRecipeV1(slug, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(slug), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof recipesControllerRecipeV1>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RecipesControllerRecipeV1QueryResult = NonNullable<Awaited<ReturnType<typeof recipesControllerRecipeV1>>>
export type RecipesControllerRecipeV1QueryError = ErrorType<unknown>


export function useRecipesControllerRecipeV1<TData = Awaited<ReturnType<typeof recipesControllerRecipeV1>>, TError = ErrorType<unknown>>(
 slug: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof recipesControllerRecipeV1>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof recipesControllerRecipeV1>>,
          TError,
          Awaited<ReturnType<typeof recipesControllerRecipeV1>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRecipesControllerRecipeV1<TData = Awaited<ReturnType<typeof recipesControllerRecipeV1>>, TError = ErrorType<unknown>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof recipesControllerRecipeV1>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof recipesControllerRecipeV1>>,
          TError,
          Awaited<ReturnType<typeof recipesControllerRecipeV1>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRecipesControllerRecipeV1<TData = Awaited<ReturnType<typeof recipesControllerRecipeV1>>, TError = ErrorType<unknown>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof recipesControllerRecipeV1>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useRecipesControllerRecipeV1<TData = Awaited<ReturnType<typeof recipesControllerRecipeV1>>, TError = ErrorType<unknown>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof recipesControllerRecipeV1>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRecipesControllerRecipeV1QueryOptions(slug,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



