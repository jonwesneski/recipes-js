/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Recipes API
 * The recipes API description
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HealthCheckControllerCheck200,
  HealthCheckControllerCheck503
} from '.././model';

import { customInstance } from '.././custom-instance';
import type { ErrorType } from '.././custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const healthCheckControllerStatus = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/status`, method: 'GET', signal
    },
      options);
    }
  

export const getHealthCheckControllerStatusQueryKey = () => {
    return [`/status`] as const;
    }

    
export const getHealthCheckControllerStatusQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckControllerStatus>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckControllerStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckControllerStatusQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckControllerStatus>>> = ({ signal }) => healthCheckControllerStatus(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckControllerStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckControllerStatusQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckControllerStatus>>>
export type HealthCheckControllerStatusQueryError = ErrorType<unknown>


export function useHealthCheckControllerStatus<TData = Awaited<ReturnType<typeof healthCheckControllerStatus>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckControllerStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckControllerStatus>>,
          TError,
          Awaited<ReturnType<typeof healthCheckControllerStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckControllerStatus<TData = Awaited<ReturnType<typeof healthCheckControllerStatus>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckControllerStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckControllerStatus>>,
          TError,
          Awaited<ReturnType<typeof healthCheckControllerStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckControllerStatus<TData = Awaited<ReturnType<typeof healthCheckControllerStatus>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckControllerStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useHealthCheckControllerStatus<TData = Awaited<ReturnType<typeof healthCheckControllerStatus>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckControllerStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckControllerStatusQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const healthCheckControllerCheck = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<HealthCheckControllerCheck200>(
      {url: `/health`, method: 'GET', signal
    },
      options);
    }
  

export const getHealthCheckControllerCheckQueryKey = () => {
    return [`/health`] as const;
    }

    
export const getHealthCheckControllerCheckQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckControllerCheck>>, TError = ErrorType<HealthCheckControllerCheck503>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckControllerCheck>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckControllerCheckQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckControllerCheck>>> = ({ signal }) => healthCheckControllerCheck(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckControllerCheck>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckControllerCheckQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckControllerCheck>>>
export type HealthCheckControllerCheckQueryError = ErrorType<HealthCheckControllerCheck503>


export function useHealthCheckControllerCheck<TData = Awaited<ReturnType<typeof healthCheckControllerCheck>>, TError = ErrorType<HealthCheckControllerCheck503>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckControllerCheck>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckControllerCheck>>,
          TError,
          Awaited<ReturnType<typeof healthCheckControllerCheck>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckControllerCheck<TData = Awaited<ReturnType<typeof healthCheckControllerCheck>>, TError = ErrorType<HealthCheckControllerCheck503>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckControllerCheck>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckControllerCheck>>,
          TError,
          Awaited<ReturnType<typeof healthCheckControllerCheck>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckControllerCheck<TData = Awaited<ReturnType<typeof healthCheckControllerCheck>>, TError = ErrorType<HealthCheckControllerCheck503>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckControllerCheck>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useHealthCheckControllerCheck<TData = Awaited<ReturnType<typeof healthCheckControllerCheck>>, TError = ErrorType<HealthCheckControllerCheck503>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckControllerCheck>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckControllerCheckQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



