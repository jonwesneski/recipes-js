// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MeasurementUnit {
  cups // Imperial Volume
  fluidOunces
  tablespoons
  teaspoons
  pints
  quarts
  gallons
  pounds // Imperial Weight
  ounces
  liters // Metric Volume
  milliliters
  kilograms // Metric Weight
  grams
}

enum UiTheme {
  system
  light
  dark
}

enum NumberFormat {
  default
  decimal
  fraction
}

enum MeasurementFormat {
  default
  imperial
  metric
}

enum CuisineType {
  // Asian
  thai
  indian
  chinese
  japanese
  korean
  vietnamese
  filipino
  indonesian
  malaysian
  singaporean
  taiwanese
  burmese
  mongolian

  // European
  spanish
  french
  italian
  british
  german
  irish
  polish
  russian
  portuguese
  turkish
  scandinavian
  dutch
  belgian
  austrian
  swiss
  hungarian
  czech

  // Mediterranean
  middleEastern
  greek
  lebanese
  moroccan
  egyptian
  tunisian
  israeli

  // Americas
  mexican
  american
  caribbean
  brazilian
  peruvian
  argentinian
  colombian
  cuban
  jamaican

  // African
  ethiopian
  nigerian
  southAfrican
  kenyan
  ghanaian

  // Fusion & Modern
  fusion
  contemporary
  cajunCreole
  texMex

  // Regional/Specialty
  mediterranean
  latinAmerican
  southeastAsian
  eastAsian
  northAfrican
  westAfrican
  centralAmerican
  southAmerican
  pacificIslander
}

enum MealType {
  breakfast
  lunch
  dinner
  snack
  dessert
}

enum DishType {
  // Liquid-based
  soup
  stew
  chili
  broth
  bisque

  // Salads & Raw
  salad
  slaw

  // Main dishes
  casserole
  stirFry
  roast
  grill
  pasta
  pizza
  sandwich
  burger
  tacos
  curry
  rice
  noodles

  // Sides
  side
  appetizer
  dimSum
  mezes

  // Baked goods
  bread
  pastry
  pie
  cake
  cookies

  // Beverages
  beverage
  smoothie
  cocktail

  // Other
  sauce
  condiment
  dip
  chutney
  salsa
}

enum DietaryType {
  vegetarian
  vegan
  glutenFree
  dairyFree
  nutFree
  lowCarb
}

enum ProteinType {
  // Poultry
  chicken
  turkey
  duck
  quail

  // Red Meat
  beef
  pork
  lamb
  veal
  venison
  bison
  goat

  // Fish
  salmon
  tuna
  cod
  halibut
  tilapia
  trout
  mahi
  swordfish
  seaBass
  snapper

  // Shellfish
  shrimp
  crab
  lobster
  scallops
  clams
  mussels
  oysters
  squid
  octopus

  // Plant-Based Proteins
  tofu
  tempeh
  seitan
  legumes
  nuts
  seeds

  // Eggs & Dairy
  eggs
  cheese
  yogurt

  // Processed/Alternative
  bacon
  sausage
  deli
  plantBasedMeat // Beyond, Impossible, etc.
}

enum DifficultyLevelType {
  easy
  medium
  hard
}

model User {
  id                String            @id @default(cuid())
  name              String
  email             String            @unique
  handle            String            @unique
  numberFormat      NumberFormat      @default(default)
  measurementFormat MeasurementFormat @default(default)
  uiTheme           UiTheme           @default(system)
  // todo: change to dailyNutrition
  diet              NutritionalFacts? @relation("UserNutritionalFacts")
  imageUrl          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  recipes           Recipe[]

  /**
   * followers/UserFollowings: where followingId equals this user's id (users who follow this user)
   * followings/UserFollows: where userId equals this user's id (users this user follows)
   */
  followers  UserFollow[] @relation("UserFollowings")
  followings UserFollow[] @relation("UserFollows")

  bookmarks     RecipeBookmark[]
  preferedDiets DietaryType[]

  @@map("users")
}

model UserFollow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation("UserFollows", fields: [userId], references: [id])
  followingId String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id])

  @@unique([userId, followingId])
  @@map("user_follows")
}

model Recipe {
  id                       String            @id @default(cuid())
  name                     String
  description              String?
  imageUrl                 String?
  preparationTimeInMinutes Int?
  cookingTimeInMinutes     Int?
  isPublic                 Boolean
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  steps                    Step[]
  equipments               Equipment[]
  userId                   String
  user                     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeTags               RecipeTag[]
  nutritionalFacts         NutritionalFacts? @relation("RecipeNutritionalFacts")
  bookmarkedBy             RecipeBookmark[]

  cuisine         CuisineType?
  meal            MealType?
  dish            DishType?
  diets           DietaryType[]
  proteins        ProteinType[]
  difficultyLevel DifficultyLevelType?

  @@unique([userId, name])
  // todo: add indexes
  // @@index([name]) // For name searches
  // @@index([isPublic, userId]) // For filtered queries
  // @@index([createdAt]) // If sorting by date
  @@map("recipes")
}

model FoodTag {
  id           String        @id @default(cuid())
  recipeId     String?       @unique
  userId       String?       @unique
  cuisineType  CuisineType?
  mealType     MealType?
  dishType     DishType?
  dietaryFlags DietaryType[] // vegetarian, vegan, etc.
  // e.g., surf & turf could be [beef, shrimp]
  proteinTypes ProteinType[]
}

model RecipeBookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("recipe_bookmarks")
}

model NutritionalFacts {
  id               String           @id @default(cuid())
  servings         Int?
  servingAmount    Int?
  servingUnit      MeasurementUnit?
  caloriesInKcal   Int?
  totalFatInG      Int?
  saturatedFatInG  Int?
  transFatInG      Int?
  cholesterolInMg  Int?
  sodiumInMg       Int?
  carbohydratesInG Int?
  fiberInG         Int?
  sugarInG         Int?
  proteinInG       Int?
  vitaminAInIU     Int?
  vitaminCInMg     Int?
  vitaminDInIU     Int?
  vitaminB6InMg    Int?
  vitaminB12InMg   Int?
  calciumInMg      Int?
  ironInMg         Int?
  magnesiumInMg    Int?
  potassiumInMg    Int?
  folateInMcg      Int?
  thiaminInMg      Int?
  riboflavinInMg   Int?
  niacinInMg       Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  recipeId         String?          @unique
  recipe           Recipe?          @relation("RecipeNutritionalFacts", fields: [recipeId], references: [id], onDelete: Cascade)
  userId           String?          @unique
  user             User?            @relation("UserNutritionalFacts", fields: [userId], references: [id], onDelete: Cascade)

  @@map("nutritional_facts")
}

model Step {
  id           String       @id @default(cuid())
  displayOrder Int
  ingredients  Ingredient[]
  instruction  String?
  imageUrl     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  recipeId     String
  recipe       Recipe       @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, displayOrder])
  @@map("steps")
}

model Equipment {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@map("equipments")
}

model Ingredient {
  id           String           @id @default(cuid())
  displayOrder Int
  isFraction   Boolean          @default(false)
  amount       Float
  unit         MeasurementUnit?
  name         String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  stepId       String
  step         Step             @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([stepId, displayOrder])
  @@map("ingredients")
}

model Tag {
  id         String      @id @default(cuid())
  name       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  recipeTags RecipeTag[]

  @@map("tags")
}

model RecipeTag {
  recipeId String
  tagId    String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@id([recipeId, tagId])
  // @@index([tagId])
  @@map("recipe_tags")
}
