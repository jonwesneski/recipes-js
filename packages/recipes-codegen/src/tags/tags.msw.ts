/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Recipes API
 * The recipes API description
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  TagNamesEntity
} from '.././model';


export const getTagsControllerTagNameListV1ResponseMock = (overrideResponse: Partial< TagNamesEntity > = {}): TagNamesEntity => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), pagination: {total_records: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), current_page: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), total_pages: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), next_page: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), prev_page: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null])}, ...overrideResponse})


export const getTagsControllerTagNameListV1MockHandler = (overrideResponse?: TagNamesEntity | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TagNamesEntity> | TagNamesEntity)) => {
  return http.get('*/v1/tag-names', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getTagsControllerTagNameListV1ResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getTagsMock = () => [
  getTagsControllerTagNameListV1MockHandler()
]
