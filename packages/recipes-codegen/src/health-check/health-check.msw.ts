/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Recipes API
 * The recipes API description
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  HealthCheckControllerCheck200
} from '.././model';


export const getHealthCheckControllerCheckResponseMock = (overrideResponse: Partial< HealthCheckControllerCheck200 > = {}): HealthCheckControllerCheck200 => ({status: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), info: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: {status: faker.string.alpha({length: {min: 10, max: 20}})}
      }, undefined]), error: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: {status: faker.string.alpha({length: {min: 10, max: 20}})}
      }, undefined]), details: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: {status: faker.string.alpha({length: {min: 10, max: 20}})}
      }, undefined]), ...overrideResponse})


export const getHealthCheckControllerStatusMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/status', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getHealthCheckControllerCheckMockHandler = (overrideResponse?: HealthCheckControllerCheck200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HealthCheckControllerCheck200> | HealthCheckControllerCheck200)) => {
  return http.get('*/health', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getHealthCheckControllerCheckResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getHealthCheckMock = () => [
  getHealthCheckControllerStatusMockHandler(),
  getHealthCheckControllerCheckMockHandler()
]
