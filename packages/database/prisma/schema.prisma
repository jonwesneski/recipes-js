// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MeasurementUnit {
  whole
  pinches
  cups // Imperial Volume
  fluidOunces
  tablespoons
  teaspoons
  pints
  quarts
  gallons
  pounds // Imperial Weight
  ounces
  liters // Metric Volume
  milliliters
  kilograms // Metric Weight
  grams
}

enum UiTheme {
  system
  light
  dark
}

enum MeasurementFormat {
  default
  imperial
  metric
}

model User {
  id                String            @id @default(cuid())
  name              String
  email             String            @unique
  handle            String            @unique
  useFractions      Boolean           @default(false)
  measurementFormat MeasurementFormat @default(default)
  uiTheme           UiTheme           @default(system)
  diet              NutritionalFacts? @relation("UserNutritionalFacts")
  imageUrl          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  recipes           Recipe[]

  followers  UserFollow[] @relation("UserFollows")
  followings UserFollow[] @relation("UserFollowings")

  @@map("users")
}

model UserFollow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation("UserFollows", fields: [userId], references: [id])
  followingId String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id])

  @@map("user_follows")
}

model Recipe {
  id                       String            @id @default(cuid())
  name                     String
  description              String?
  imageUrl                 String?
  preparationTimeInMinutes Int?
  cookingTimeInMinutes     Int?
  isPublic                 Boolean
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  steps                    Step[]
  equipments               Equipment[]
  userId                   String
  user                     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeTags               RecipeTag[]
  nutritionalFacts         NutritionalFacts? @relation("RecipeNutritionalFacts")

  @@unique([userId, name])
  @@map("recipes")
}

model NutritionalFacts {
  id               String           @id @default(cuid())
  servings         Int?
  servingAmount    Int?
  servingUnit      MeasurementUnit?
  caloriesInKcal   Int?
  totalFatInG      Int?
  saturatedFatInG  Int?
  transFatInG      Int?
  cholesterolInMg  Int?
  sodiumInMg       Int?
  carbohydratesInG Int?
  fiberInG         Int?
  sugarInG         Int?
  proteinInG       Int?
  vitaminAInIU     Int?
  vitaminCInMg     Int?
  vitaminDInIU     Int?
  vitaminB6InMg    Int?
  vitaminB12InMg   Int?
  calciumInMg      Int?
  ironInMg         Int?
  magnesiumInMg    Int?
  potassiumInMg    Int?
  folateInMcg      Int?
  thiaminInMg      Int?
  riboflavinInMg   Int?
  niacinInMg       Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  recipeId         String?          @unique
  recipe           Recipe?          @relation("RecipeNutritionalFacts", fields: [recipeId], references: [id], onDelete: Cascade)
  userId           String?          @unique
  user             User?            @relation("UserNutritionalFacts", fields: [userId], references: [id], onDelete: Cascade)

  @@map("nutritional_facts")
}

model Step {
  id           String       @id @default(cuid())
  displayOrder Int
  ingredients  Ingredient[]
  instruction  String?
  imageUrl     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  recipeId     String
  recipe       Recipe       @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, displayOrder])
  @@map("steps")
}

model Equipment {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@map("equipments")
}

model Ingredient {
  id           String          @id @default(cuid())
  displayOrder Int
  amount       Float
  unit         MeasurementUnit
  name         String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  stepId       String
  step         Step            @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([stepId, displayOrder])
  @@map("ingredients")
}

model Tag {
  id         String      @id @default(cuid())
  name       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  recipeTags RecipeTag[]

  @@map("tags")
}

model RecipeTag {
  recipeId String
  tagId    String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@id([recipeId, tagId])
  @@map("recipe_tags")
}
