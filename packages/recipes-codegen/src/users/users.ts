/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Recipes API
 * The recipes API description
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  UserEntity,
  UserPatchDto
} from '.././model';

import { customInstance } from '.././custom-instance';
import type { ErrorType , BodyType } from '.././custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const usersControllerUserV1 = (
    handle: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserEntity>(
      {url: `/v1/users/${handle}`, method: 'GET', signal
    },
      options);
    }
  

export const getUsersControllerUserV1QueryKey = (handle: string,) => {
    return [`/v1/users/${handle}`] as const;
    }

    
export const getUsersControllerUserV1QueryOptions = <TData = Awaited<ReturnType<typeof usersControllerUserV1>>, TError = ErrorType<unknown>>(handle: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerUserV1>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersControllerUserV1QueryKey(handle);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerUserV1>>> = ({ signal }) => usersControllerUserV1(handle, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(handle), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersControllerUserV1>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersControllerUserV1QueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerUserV1>>>
export type UsersControllerUserV1QueryError = ErrorType<unknown>


export function useUsersControllerUserV1<TData = Awaited<ReturnType<typeof usersControllerUserV1>>, TError = ErrorType<unknown>>(
 handle: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerUserV1>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerUserV1>>,
          TError,
          Awaited<ReturnType<typeof usersControllerUserV1>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersControllerUserV1<TData = Awaited<ReturnType<typeof usersControllerUserV1>>, TError = ErrorType<unknown>>(
 handle: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerUserV1>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerUserV1>>,
          TError,
          Awaited<ReturnType<typeof usersControllerUserV1>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersControllerUserV1<TData = Awaited<ReturnType<typeof usersControllerUserV1>>, TError = ErrorType<unknown>>(
 handle: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerUserV1>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useUsersControllerUserV1<TData = Awaited<ReturnType<typeof usersControllerUserV1>>, TError = ErrorType<unknown>>(
 handle: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerUserV1>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersControllerUserV1QueryOptions(handle,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usersControllerUpdateUserV1 = (
    handle: string,
    userPatchDto: BodyType<UserPatchDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<UserEntity>(
      {url: `/v1/users/${handle}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userPatchDto
    },
      options);
    }
  


export const getUsersControllerUpdateUserV1MutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateUserV1>>, TError,{handle: string;data: BodyType<UserPatchDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateUserV1>>, TError,{handle: string;data: BodyType<UserPatchDto>}, TContext> => {

const mutationKey = ['usersControllerUpdateUserV1'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerUpdateUserV1>>, {handle: string;data: BodyType<UserPatchDto>}> = (props) => {
          const {handle,data} = props ?? {};

          return  usersControllerUpdateUserV1(handle,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersControllerUpdateUserV1MutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerUpdateUserV1>>>
    export type UsersControllerUpdateUserV1MutationBody = BodyType<UserPatchDto>
    export type UsersControllerUpdateUserV1MutationError = ErrorType<unknown>

    export const useUsersControllerUpdateUserV1 = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateUserV1>>, TError,{handle: string;data: BodyType<UserPatchDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersControllerUpdateUserV1>>,
        TError,
        {handle: string;data: BodyType<UserPatchDto>},
        TContext
      > => {

      const mutationOptions = getUsersControllerUpdateUserV1MutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    